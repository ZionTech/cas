<?xml version="1.0" encoding="UTF-8"?>
<!--
| deployerConfigContext.xml centralizes into one file some of the declarative configuration that
| all CAS deployers will need to modify.
|
| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.
| The beans declared in this file are instantiated at context initialization time by the Spring
| ContextLoaderListener declared in web.xml.  It finds this file because this
| file is among those declared in the context parameter "contextConfigLocation".
|
| By far the most common change you will need to make in this file is to change the last bean
| declaration to replace the default authentication handler with
| one implementing your approach for authenticating usernames and passwords.
+-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


	<bean id="primaryPrincipalResolver"
          class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver" >
        <property name="attributeRepository" ref="attributeRepository" />
    </bean>
    
    <util:map id="authenticationHandlersResolvers">
        <entry key-ref="proxyAuthenticationHandler" value-ref="proxyPrincipalResolver" />
         <entry key-ref="ldapAuthenticationHandler" value="#{null}" />
    </util:map>
    <util:list id="authenticationMetadataPopulators" />

    <bean id="attributeRepository" class="org.jasig.services.persondir.support.NamedStubPersonAttributeDao"
          p:backingMap-ref="attrRepoBackingMap" />

    <alias name="acceptUsersAuthenticationHandler" alias="primaryAuthenticationHandler" />
    <alias name="personDirectoryPrincipalResolver" alias="primaryPrincipalResolver" />
    
    <util:map id="attrRepoBackingMap">
        <entry key="uid" value="uid" />
        <entry key="eduPersonAffiliation" value="eduPersonAffiliation" />
        <entry key="groupMembership" value="groupMembership" />
        <entry>
            <key><value>memberOf</value></key>
            <list>
                <value>faculty</value>
                <value>staff</value>
                <value>org</value>
            </list>
        </entry>
    </util:map>

    <alias name="serviceThemeResolver" alias="themeResolver" />

    <alias name="jsonServiceRegistryDao" alias="serviceRegistryDao" />

    <alias name="defaultTicketRegistry" alias="ticketRegistry" />

    <alias name="ticketGrantingTicketExpirationPolicy" alias="grantingTicketExpirationPolicy" />
    <alias name="multiTimeUseOrTimeoutExpirationPolicy" alias="serviceTicketExpirationPolicy" />

    <alias name="anyAuthenticationPolicy" alias="authenticationPolicy" />
    <alias name="acceptAnyAuthenticationPolicyFactory" alias="authenticationPolicyFactory" />

       <!-- LDAP authentication -->
        <!-- See http://jasig.github.io/cas/development/installation/LDAP-Authentication.html -->
        <bean id="ldapAuthenticationHandler" class="org.jasig.cas.authentication.LdapAuthenticationHandler" p:principalIdAttribute="mail">
                <constructor-arg ref="authenticator" />
                <property name="principalAttributeMap">
                        <map>
                                <!--
                                   | This map provides a simple attribute resolution mechanism.
                                   | Keys are LDAP attribute names, values are CAS attribute names.
                                   | This facility can be used instead or in addition to PrincipalResolver
                                   | components.
                                   -->
                                <entry key="isMemberOf" value="isMemberOf" />
                                <entry key="eduPersonAffiliation" value="affiliation" />
                                <entry key="mail" value="mail" />
                                <entry key="displayName" value="displayName" />
                                <entry key="entryUUID" value="entryUUID" />
                                <entry key="cn" value="cn" />
                                <entry key="sn" value="sn" />
                        </map>
                </property>
        </bean>

        <!--
           | This configuration uses a connection pool for both search and bind operations.
           | Pooling all operations is strongly recommended.
           -->
        <bean id="authenticator" class="org.ldaptive.auth.Authenticator"
                c:resolver-ref="wavityDnResolver"
                c:handler-ref="pooledBindHandler" />

        <!--
           | Contrast with org.ldaptive.auth.FormatDnResolver, which constructs bind DN
           | based on a format string using the username as input.
           | FormatDnResolver is preferable for directories that support it, such as Active Directory.
           -->
        <bean id="wavityDnResolver"
                class="org.jasig.cas.authentication.support.WavityFormatDnResolver"
                c:format="mail=%s,${ldap.authn.baseDn}" />           

        <bean id="pooledLdapConnectionFactory" class="org.ldaptive.pool.PooledConnectionFactory"
                p:connectionPool-ref="connectionPool" />
                 <bean id="connectionPool" class="org.ldaptive.pool.BlockingConnectionPool"
                init-method="initialize"
                p:poolConfig-ref="ldapPoolConfig"
                p:blockWaitTime="${ldap.pool.blockWaitTime}"
                p:validator-ref="searchValidator"
                p:pruneStrategy-ref="pruneStrategy"
                p:connectionFactory-ref="connectionFactory" />

        <bean id="connectionFactory" class="org.ldaptive.DefaultConnectionFactory"
                p:connectionConfig-ref="connectionConfig" />

        <!--
           | NOTE:
           | The sslConfig property provides a route to configure custom key/trust stores.
           | The connectionInitializer property provides a means (possibly in addition to sslConfig)
           | to support SASL EXTERNAL binds.
           | See http://www.ldaptive.org/docs/guide/connections for more information.
           -->
        <bean id="connectionConfig" class="org.ldaptive.ConnectionConfig"
                p:ldapUrl="${ldap.url}"
                p:connectTimeout="${ldap.connectTimeout}"
                p:useSSL="${ldap.useSSL}"
                p:useStartTLS="${ldap.useStartTLS}"
                p:connectionInitializer-ref="bindConnectionInitializer"
                p:sslConfig-ref="sslConfig" />

        <bean id="bindConnectionInitializer"
                class="org.ldaptive.BindConnectionInitializer"
                p:bindDn="${ldap.managerDn}">
                <property name="bindCredential">
                        <bean class="org.ldaptive.Credential"
                                c:password="${ldap.managerPassword}" />
                </property>
        </bean>

        <bean id="sslConfig" class="org.ldaptive.ssl.SslConfig">
                <property name="credentialConfig">
                        <bean class="org.ldaptive.ssl.X509CredentialConfig"
                                p:trustCertificates="${ldap.trustedCert}" />
                </property>
        </bean>

        <bean id="pooledBindHandler" class="org.ldaptive.auth.PooledBindAuthenticationHandler"
                p:connectionFactory-ref="pooledLdapConnectionFactory" />
    <bean id="ldapPoolConfig" class="org.ldaptive.pool.PoolConfig"
                p:minPoolSize="${ldap.pool.minSize}"
                p:maxPoolSize="${ldap.pool.maxSize}"
                p:validateOnCheckIn="${ldap.pool.validateOnCheckIn}"
                p:validateOnCheckOut="${ldap.pool.validateOnCheckOut}"
                p:validatePeriodically="${ldap.pool.validatePeriodically}"
                p:validatePeriod="${ldap.pool.validatePeriod}" />

        <bean id="pruneStrategy" class="org.ldaptive.pool.IdlePruneStrategy"
                p:prunePeriod="${ldap.pool.prunePeriod}"
                p:idleTime="${ldap.pool.idleTime}" />

        <bean id="searchValidator" class="org.ldaptive.pool.SearchValidator" />

        <bean id="searchRequest"
                class="org.ldaptive.SearchRequest"
                p:baseDn="${ldap.authn.baseDn}"
                p:searchFilter="${ldap.authn.searchFilter}" />                
    <bean id="auditTrailManager"
          class="org.jasig.inspektr.audit.support.Slf4jLoggingAuditTrailManager"
          p:entrySeparator="${cas.audit.singleline.separator:|}"
          p:useSingleLine="${cas.audit.singleline:false}"/>

    <alias name="neverThrottle" alias="authenticationThrottle" />

    <util:list id="monitorsList">
        <ref bean="memoryMonitor" />
        <ref bean="sessionMonitor" />
    </util:list>

    <alias name="defaultPrincipalFactory" alias="principalFactory" />
    <alias name="defaultAuthenticationTransactionManager" alias="authenticationTransactionManager" />
    <alias name="defaultPrincipalElectionStrategy" alias="principalElectionStrategy" />
</beans>
